// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ws.proto

package ws_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebsocketServices_EmitRoomCreated_FullMethodName               = "/ws_srv.WebsocketServices/EmitRoomCreated"
	WebsocketServices_EmitJoinRoom_FullMethodName                  = "/ws_srv.WebsocketServices/EmitJoinRoom"
	WebsocketServices_EmitRequireRenegotiateSession_FullMethodName = "/ws_srv.WebsocketServices/EmitRequireRenegotiateSession"
)

// WebsocketServicesClient is the client API for WebsocketServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketServicesClient interface {
	EmitRoomCreated(ctx context.Context, in *EmitRoomCreatedRequest, opts ...grpc.CallOption) (*EmitRoomCreatedResponse, error)
	EmitJoinRoom(ctx context.Context, in *EmitJoinRoomReequest, opts ...grpc.CallOption) (*EmitJoinRoomResponse, error)
	EmitRequireRenegotiateSession(ctx context.Context, in *EmitRequireRenegotiateSessionRequest, opts ...grpc.CallOption) (*EmitRequireRenegotiateSessionResponse, error)
}

type websocketServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketServicesClient(cc grpc.ClientConnInterface) WebsocketServicesClient {
	return &websocketServicesClient{cc}
}

func (c *websocketServicesClient) EmitRoomCreated(ctx context.Context, in *EmitRoomCreatedRequest, opts ...grpc.CallOption) (*EmitRoomCreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmitRoomCreatedResponse)
	err := c.cc.Invoke(ctx, WebsocketServices_EmitRoomCreated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServicesClient) EmitJoinRoom(ctx context.Context, in *EmitJoinRoomReequest, opts ...grpc.CallOption) (*EmitJoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmitJoinRoomResponse)
	err := c.cc.Invoke(ctx, WebsocketServices_EmitJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServicesClient) EmitRequireRenegotiateSession(ctx context.Context, in *EmitRequireRenegotiateSessionRequest, opts ...grpc.CallOption) (*EmitRequireRenegotiateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmitRequireRenegotiateSessionResponse)
	err := c.cc.Invoke(ctx, WebsocketServices_EmitRequireRenegotiateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServicesServer is the server API for WebsocketServices service.
// All implementations must embed UnimplementedWebsocketServicesServer
// for forward compatibility.
type WebsocketServicesServer interface {
	EmitRoomCreated(context.Context, *EmitRoomCreatedRequest) (*EmitRoomCreatedResponse, error)
	EmitJoinRoom(context.Context, *EmitJoinRoomReequest) (*EmitJoinRoomResponse, error)
	EmitRequireRenegotiateSession(context.Context, *EmitRequireRenegotiateSessionRequest) (*EmitRequireRenegotiateSessionResponse, error)
	mustEmbedUnimplementedWebsocketServicesServer()
}

// UnimplementedWebsocketServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebsocketServicesServer struct{}

func (UnimplementedWebsocketServicesServer) EmitRoomCreated(context.Context, *EmitRoomCreatedRequest) (*EmitRoomCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitRoomCreated not implemented")
}
func (UnimplementedWebsocketServicesServer) EmitJoinRoom(context.Context, *EmitJoinRoomReequest) (*EmitJoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitJoinRoom not implemented")
}
func (UnimplementedWebsocketServicesServer) EmitRequireRenegotiateSession(context.Context, *EmitRequireRenegotiateSessionRequest) (*EmitRequireRenegotiateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitRequireRenegotiateSession not implemented")
}
func (UnimplementedWebsocketServicesServer) mustEmbedUnimplementedWebsocketServicesServer() {}
func (UnimplementedWebsocketServicesServer) testEmbeddedByValue()                           {}

// UnsafeWebsocketServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServicesServer will
// result in compilation errors.
type UnsafeWebsocketServicesServer interface {
	mustEmbedUnimplementedWebsocketServicesServer()
}

func RegisterWebsocketServicesServer(s grpc.ServiceRegistrar, srv WebsocketServicesServer) {
	// If the following call pancis, it indicates UnimplementedWebsocketServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebsocketServices_ServiceDesc, srv)
}

func _WebsocketServices_EmitRoomCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitRoomCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServicesServer).EmitRoomCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketServices_EmitRoomCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServicesServer).EmitRoomCreated(ctx, req.(*EmitRoomCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketServices_EmitJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitJoinRoomReequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServicesServer).EmitJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketServices_EmitJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServicesServer).EmitJoinRoom(ctx, req.(*EmitJoinRoomReequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketServices_EmitRequireRenegotiateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitRequireRenegotiateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServicesServer).EmitRequireRenegotiateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketServices_EmitRequireRenegotiateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServicesServer).EmitRequireRenegotiateSession(ctx, req.(*EmitRequireRenegotiateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketServices_ServiceDesc is the grpc.ServiceDesc for WebsocketServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ws_srv.WebsocketServices",
	HandlerType: (*WebsocketServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmitRoomCreated",
			Handler:    _WebsocketServices_EmitRoomCreated_Handler,
		},
		{
			MethodName: "EmitJoinRoom",
			Handler:    _WebsocketServices_EmitJoinRoom_Handler,
		},
		{
			MethodName: "EmitRequireRenegotiateSession",
			Handler:    _WebsocketServices_EmitRequireRenegotiateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws.proto",
}
