// Package cloudflare_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cloudflare_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	SecretScopes = "secret.Scopes"
)

// Defines values for GetSessionStateResponseTracksLocation.
const (
	GetSessionStateResponseTracksLocationLocal  GetSessionStateResponseTracksLocation = "local"
	GetSessionStateResponseTracksLocationRemote GetSessionStateResponseTracksLocation = "remote"
)

// Defines values for GetSessionStateResponseTracksStatus.
const (
	Active   GetSessionStateResponseTracksStatus = "active"
	Inactive GetSessionStateResponseTracksStatus = "inactive"
	Waiting  GetSessionStateResponseTracksStatus = "waiting"
)

// Defines values for NewSessionResponseSessionDescriptionType.
const (
	NewSessionResponseSessionDescriptionTypeAnswer NewSessionResponseSessionDescriptionType = "answer"
	NewSessionResponseSessionDescriptionTypeOffer  NewSessionResponseSessionDescriptionType = "offer"
)

// Defines values for SessionDescriptionType.
const (
	SessionDescriptionTypeAnswer SessionDescriptionType = "answer"
	SessionDescriptionTypeOffer  SessionDescriptionType = "offer"
)

// Defines values for TrackObjectLocation.
const (
	TrackObjectLocationLocal  TrackObjectLocation = "local"
	TrackObjectLocationRemote TrackObjectLocation = "remote"
)

// Defines values for TracksResponseTracksLocation.
const (
	Local  TracksResponseTracksLocation = "local"
	Remote TracksResponseTracksLocation = "remote"
)

// CloseTrackObject defines model for CloseTrackObject.
type CloseTrackObject struct {
	// Mid mid associated to the track's transceiver to close
	Mid *string `json:"mid,omitempty"`
}

// CloseTracksRequest defines model for CloseTracksRequest.
type CloseTracksRequest struct {
	// Force True if you want to stop just the data flow for the tracks, no WebRTC renegotiation
	Force              *bool               `json:"force,omitempty"`
	SessionDescription *SessionDescription `json:"sessionDescription,omitempty"`
	Tracks             *[]CloseTrackObject `json:"tracks,omitempty"`
}

// CloseTracksResponse defines model for CloseTracksResponse.
type CloseTracksResponse struct {
	RequiresImmediateRenegotiation *bool               `json:"requiresImmediateRenegotiation,omitempty"`
	SessionDescription             *SessionDescription `json:"sessionDescription,omitempty"`
	Tracks                         *[]struct {
		Error *struct {
			ErrorCode        *string `json:"errorCode,omitempty"`
			ErrorDescription *string `json:"errorDescription,omitempty"`
		} `json:"error,omitempty"`

		// Mid mid associated to the track's transceiver to close
		Mid *string `json:"mid,omitempty"`
	} `json:"tracks,omitempty"`
}

// GetSessionStateResponse defines model for GetSessionStateResponse.
type GetSessionStateResponse struct {
	Tracks *[]struct {
		// Location If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
		Location *GetSessionStateResponseTracksLocation `json:"location,omitempty"`

		// Mid mid associated to track's transceiver. It should be set with local tracks only
		Mid *string `json:"mid,omitempty"`

		// SessionId Session ID of the track owner. It should be set for remote tracks only
		SessionId *string                              `json:"sessionId,omitempty"`
		Status    *GetSessionStateResponseTracksStatus `json:"status,omitempty"`

		// TrackName Given name for the track
		TrackName *string `json:"trackName,omitempty"`
	} `json:"tracks,omitempty"`
}

// GetSessionStateResponseTracksLocation If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
type GetSessionStateResponseTracksLocation string

// GetSessionStateResponseTracksStatus defines model for GetSessionStateResponse.Tracks.Status.
type GetSessionStateResponseTracksStatus string

// NewSessionResponse defines model for NewSessionResponse.
type NewSessionResponse struct {
	SessionDescription *struct {
		Sdp  *string                                   `json:"sdp,omitempty"`
		Type *NewSessionResponseSessionDescriptionType `json:"type,omitempty"`
	} `json:"sessionDescription,omitempty"`
	SessionId *string `json:"sessionId,omitempty"`
}

// NewSessionResponseSessionDescriptionType defines model for NewSessionResponse.SessionDescription.Type.
type NewSessionResponseSessionDescriptionType string

// SessionDescription defines model for SessionDescription.
type SessionDescription struct {
	Sdp  *string                 `json:"sdp,omitempty"`
	Type *SessionDescriptionType `json:"type,omitempty"`
}

// SessionDescriptionType defines model for SessionDescription.Type.
type SessionDescriptionType string

// TrackObject defines model for TrackObject.
type TrackObject struct {
	// Location If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
	Location *TrackObjectLocation `json:"location,omitempty"`

	// Mid mid associated to track's transceiver. It should be set with local tracks only
	Mid *string `json:"mid,omitempty"`

	// SessionId Session ID of the track owner. It should be set for remote tracks only
	SessionId *string `json:"sessionId,omitempty"`

	// TrackName Given name for the track
	TrackName *string `json:"trackName,omitempty"`
}

// TrackObjectLocation If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
type TrackObjectLocation string

// TracksRequest defines model for TracksRequest.
type TracksRequest struct {
	SessionDescription *SessionDescription `json:"sessionDescription,omitempty"`
	Tracks             *[]TrackObject      `json:"tracks,omitempty"`
}

// TracksResponse defines model for TracksResponse.
type TracksResponse struct {
	RequiresImmediateRenegotiation *bool               `json:"requiresImmediateRenegotiation,omitempty"`
	SessionDescription             *SessionDescription `json:"sessionDescription,omitempty"`
	Tracks                         *[]struct {
		Error *struct {
			ErrorCode        *string `json:"errorCode,omitempty"`
			ErrorDescription *string `json:"errorDescription,omitempty"`
		} `json:"error,omitempty"`

		// Location If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
		Location *TracksResponseTracksLocation `json:"location,omitempty"`

		// Mid mid associated to track's transceiver. It should be set with local tracks only
		Mid *string `json:"mid,omitempty"`

		// SessionId Session ID of the track owner. It should be set for remote tracks only
		SessionId *string `json:"sessionId,omitempty"`

		// TrackName Given name for the track
		TrackName *string `json:"trackName,omitempty"`
	} `json:"tracks,omitempty"`
}

// TracksResponseTracksLocation If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
type TracksResponseTracksLocation string

// PutAppsAppIdSessionsSessionIdRenegotiateJSONBody defines parameters for PutAppsAppIdSessionsSessionIdRenegotiate.
type PutAppsAppIdSessionsSessionIdRenegotiateJSONBody struct {
	SessionDescription *SessionDescription `json:"sessionDescription,omitempty"`
}

// PutAppsAppIdSessionsSessionIdTracksCloseJSONBody defines parameters for PutAppsAppIdSessionsSessionIdTracksClose.
type PutAppsAppIdSessionsSessionIdTracksCloseJSONBody struct {
	// Force True if you want to stop just the data flow for the tracks, no WebRTC renegotiation
	Force              *bool               `json:"force,omitempty"`
	SessionDescription *SessionDescription `json:"sessionDescription,omitempty"`
	Tracks             *[]CloseTrackObject `json:"tracks,omitempty"`
}

// PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody defines body for PutAppsAppIdSessionsSessionIdRenegotiate for application/json ContentType.
type PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody PutAppsAppIdSessionsSessionIdRenegotiateJSONBody

// PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody defines body for PutAppsAppIdSessionsSessionIdTracksClose for application/json ContentType.
type PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody PutAppsAppIdSessionsSessionIdTracksCloseJSONBody

// PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody defines body for PostAppsAppIdSessionsSessionIdTracksNew for application/json ContentType.
type PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody = TracksRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAppsAppIdSessionsNew request
	PostAppsAppIdSessionsNew(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppsAppIdSessionsSessionId request
	GetAppsAppIdSessionsSessionId(ctx context.Context, appId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAppsAppIdSessionsSessionIdRenegotiateWithBody request with any body
	PutAppsAppIdSessionsSessionIdRenegotiateWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAppsAppIdSessionsSessionIdRenegotiate(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAppsAppIdSessionsSessionIdTracksCloseWithBody request with any body
	PutAppsAppIdSessionsSessionIdTracksCloseWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAppsAppIdSessionsSessionIdTracksClose(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAppsAppIdSessionsSessionIdTracksNewWithBody request with any body
	PostAppsAppIdSessionsSessionIdTracksNewWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppsAppIdSessionsSessionIdTracksNew(ctx context.Context, appId string, sessionId string, body PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAppsAppIdSessionsNew(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsAppIdSessionsNewRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppsAppIdSessionsSessionId(ctx context.Context, appId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppsAppIdSessionsSessionIdRequest(c.Server, appId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAppsAppIdSessionsSessionIdRenegotiateWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAppsAppIdSessionsSessionIdRenegotiateRequestWithBody(c.Server, appId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAppsAppIdSessionsSessionIdRenegotiate(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAppsAppIdSessionsSessionIdRenegotiateRequest(c.Server, appId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAppsAppIdSessionsSessionIdTracksCloseWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAppsAppIdSessionsSessionIdTracksCloseRequestWithBody(c.Server, appId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAppsAppIdSessionsSessionIdTracksClose(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAppsAppIdSessionsSessionIdTracksCloseRequest(c.Server, appId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsAppIdSessionsSessionIdTracksNewWithBody(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsAppIdSessionsSessionIdTracksNewRequestWithBody(c.Server, appId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsAppIdSessionsSessionIdTracksNew(ctx context.Context, appId string, sessionId string, body PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsAppIdSessionsSessionIdTracksNewRequest(c.Server, appId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAppsAppIdSessionsNewRequest generates requests for PostAppsAppIdSessionsNew
func NewPostAppsAppIdSessionsNewRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps/%s/sessions/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppsAppIdSessionsSessionIdRequest generates requests for GetAppsAppIdSessionsSessionId
func NewGetAppsAppIdSessionsSessionIdRequest(server string, appId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps/%s/sessions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAppsAppIdSessionsSessionIdRenegotiateRequest calls the generic PutAppsAppIdSessionsSessionIdRenegotiate builder with application/json body
func NewPutAppsAppIdSessionsSessionIdRenegotiateRequest(server string, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAppsAppIdSessionsSessionIdRenegotiateRequestWithBody(server, appId, sessionId, "application/json", bodyReader)
}

// NewPutAppsAppIdSessionsSessionIdRenegotiateRequestWithBody generates requests for PutAppsAppIdSessionsSessionIdRenegotiate with any type of body
func NewPutAppsAppIdSessionsSessionIdRenegotiateRequestWithBody(server string, appId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps/%s/sessions/%s/renegotiate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAppsAppIdSessionsSessionIdTracksCloseRequest calls the generic PutAppsAppIdSessionsSessionIdTracksClose builder with application/json body
func NewPutAppsAppIdSessionsSessionIdTracksCloseRequest(server string, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAppsAppIdSessionsSessionIdTracksCloseRequestWithBody(server, appId, sessionId, "application/json", bodyReader)
}

// NewPutAppsAppIdSessionsSessionIdTracksCloseRequestWithBody generates requests for PutAppsAppIdSessionsSessionIdTracksClose with any type of body
func NewPutAppsAppIdSessionsSessionIdTracksCloseRequestWithBody(server string, appId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps/%s/sessions/%s/tracks/close", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAppsAppIdSessionsSessionIdTracksNewRequest calls the generic PostAppsAppIdSessionsSessionIdTracksNew builder with application/json body
func NewPostAppsAppIdSessionsSessionIdTracksNewRequest(server string, appId string, sessionId string, body PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppsAppIdSessionsSessionIdTracksNewRequestWithBody(server, appId, sessionId, "application/json", bodyReader)
}

// NewPostAppsAppIdSessionsSessionIdTracksNewRequestWithBody generates requests for PostAppsAppIdSessionsSessionIdTracksNew with any type of body
func NewPostAppsAppIdSessionsSessionIdTracksNewRequestWithBody(server string, appId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps/%s/sessions/%s/tracks/new", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAppsAppIdSessionsNewWithResponse request
	PostAppsAppIdSessionsNewWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsNewResponse, error)

	// GetAppsAppIdSessionsSessionIdWithResponse request
	GetAppsAppIdSessionsSessionIdWithResponse(ctx context.Context, appId string, sessionId string, reqEditors ...RequestEditorFn) (*GetAppsAppIdSessionsSessionIdResponse, error)

	// PutAppsAppIdSessionsSessionIdRenegotiateWithBodyWithResponse request with any body
	PutAppsAppIdSessionsSessionIdRenegotiateWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdRenegotiateResponse, error)

	PutAppsAppIdSessionsSessionIdRenegotiateWithResponse(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdRenegotiateResponse, error)

	// PutAppsAppIdSessionsSessionIdTracksCloseWithBodyWithResponse request with any body
	PutAppsAppIdSessionsSessionIdTracksCloseWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdTracksCloseResponse, error)

	PutAppsAppIdSessionsSessionIdTracksCloseWithResponse(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdTracksCloseResponse, error)

	// PostAppsAppIdSessionsSessionIdTracksNewWithBodyWithResponse request with any body
	PostAppsAppIdSessionsSessionIdTracksNewWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsSessionIdTracksNewResponse, error)

	PostAppsAppIdSessionsSessionIdTracksNewWithResponse(ctx context.Context, appId string, sessionId string, body PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsSessionIdTracksNewResponse, error)
}

type PostAppsAppIdSessionsNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		SessionDescription *struct {
			Sdp  *string                                            `json:"sdp,omitempty"`
			Type *PostAppsAppIdSessionsNew201SessionDescriptionType `json:"type,omitempty"`
		} `json:"sessionDescription,omitempty"`
		SessionId *string `json:"sessionId,omitempty"`
	}
}
type PostAppsAppIdSessionsNew201SessionDescriptionType string

// Status returns HTTPResponse.Status
func (r PostAppsAppIdSessionsNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsAppIdSessionsNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppsAppIdSessionsSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSessionStateResponse
}

// Status returns HTTPResponse.Status
func (r GetAppsAppIdSessionsSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppsAppIdSessionsSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAppsAppIdSessionsSessionIdRenegotiateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionDescription
}

// Status returns HTTPResponse.Status
func (r PutAppsAppIdSessionsSessionIdRenegotiateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAppsAppIdSessionsSessionIdRenegotiateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAppsAppIdSessionsSessionIdTracksCloseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloseTracksResponse
}

// Status returns HTTPResponse.Status
func (r PutAppsAppIdSessionsSessionIdTracksCloseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAppsAppIdSessionsSessionIdTracksCloseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAppsAppIdSessionsSessionIdTracksNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TracksResponse
}

// Status returns HTTPResponse.Status
func (r PostAppsAppIdSessionsSessionIdTracksNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsAppIdSessionsSessionIdTracksNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAppsAppIdSessionsNewWithResponse request returning *PostAppsAppIdSessionsNewResponse
func (c *ClientWithResponses) PostAppsAppIdSessionsNewWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsNewResponse, error) {
	rsp, err := c.PostAppsAppIdSessionsNew(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsAppIdSessionsNewResponse(rsp)
}

// GetAppsAppIdSessionsSessionIdWithResponse request returning *GetAppsAppIdSessionsSessionIdResponse
func (c *ClientWithResponses) GetAppsAppIdSessionsSessionIdWithResponse(ctx context.Context, appId string, sessionId string, reqEditors ...RequestEditorFn) (*GetAppsAppIdSessionsSessionIdResponse, error) {
	rsp, err := c.GetAppsAppIdSessionsSessionId(ctx, appId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppsAppIdSessionsSessionIdResponse(rsp)
}

// PutAppsAppIdSessionsSessionIdRenegotiateWithBodyWithResponse request with arbitrary body returning *PutAppsAppIdSessionsSessionIdRenegotiateResponse
func (c *ClientWithResponses) PutAppsAppIdSessionsSessionIdRenegotiateWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdRenegotiateResponse, error) {
	rsp, err := c.PutAppsAppIdSessionsSessionIdRenegotiateWithBody(ctx, appId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAppsAppIdSessionsSessionIdRenegotiateResponse(rsp)
}

func (c *ClientWithResponses) PutAppsAppIdSessionsSessionIdRenegotiateWithResponse(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdRenegotiateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdRenegotiateResponse, error) {
	rsp, err := c.PutAppsAppIdSessionsSessionIdRenegotiate(ctx, appId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAppsAppIdSessionsSessionIdRenegotiateResponse(rsp)
}

// PutAppsAppIdSessionsSessionIdTracksCloseWithBodyWithResponse request with arbitrary body returning *PutAppsAppIdSessionsSessionIdTracksCloseResponse
func (c *ClientWithResponses) PutAppsAppIdSessionsSessionIdTracksCloseWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdTracksCloseResponse, error) {
	rsp, err := c.PutAppsAppIdSessionsSessionIdTracksCloseWithBody(ctx, appId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAppsAppIdSessionsSessionIdTracksCloseResponse(rsp)
}

func (c *ClientWithResponses) PutAppsAppIdSessionsSessionIdTracksCloseWithResponse(ctx context.Context, appId string, sessionId string, body PutAppsAppIdSessionsSessionIdTracksCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAppsAppIdSessionsSessionIdTracksCloseResponse, error) {
	rsp, err := c.PutAppsAppIdSessionsSessionIdTracksClose(ctx, appId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAppsAppIdSessionsSessionIdTracksCloseResponse(rsp)
}

// PostAppsAppIdSessionsSessionIdTracksNewWithBodyWithResponse request with arbitrary body returning *PostAppsAppIdSessionsSessionIdTracksNewResponse
func (c *ClientWithResponses) PostAppsAppIdSessionsSessionIdTracksNewWithBodyWithResponse(ctx context.Context, appId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsSessionIdTracksNewResponse, error) {
	rsp, err := c.PostAppsAppIdSessionsSessionIdTracksNewWithBody(ctx, appId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsAppIdSessionsSessionIdTracksNewResponse(rsp)
}

func (c *ClientWithResponses) PostAppsAppIdSessionsSessionIdTracksNewWithResponse(ctx context.Context, appId string, sessionId string, body PostAppsAppIdSessionsSessionIdTracksNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsAppIdSessionsSessionIdTracksNewResponse, error) {
	rsp, err := c.PostAppsAppIdSessionsSessionIdTracksNew(ctx, appId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsAppIdSessionsSessionIdTracksNewResponse(rsp)
}

// ParsePostAppsAppIdSessionsNewResponse parses an HTTP response from a PostAppsAppIdSessionsNewWithResponse call
func ParsePostAppsAppIdSessionsNewResponse(rsp *http.Response) (*PostAppsAppIdSessionsNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsAppIdSessionsNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			SessionDescription *struct {
				Sdp  *string                                            `json:"sdp,omitempty"`
				Type *PostAppsAppIdSessionsNew201SessionDescriptionType `json:"type,omitempty"`
			} `json:"sessionDescription,omitempty"`
			SessionId *string `json:"sessionId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAppsAppIdSessionsSessionIdResponse parses an HTTP response from a GetAppsAppIdSessionsSessionIdWithResponse call
func ParseGetAppsAppIdSessionsSessionIdResponse(rsp *http.Response) (*GetAppsAppIdSessionsSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppsAppIdSessionsSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSessionStateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAppsAppIdSessionsSessionIdRenegotiateResponse parses an HTTP response from a PutAppsAppIdSessionsSessionIdRenegotiateWithResponse call
func ParsePutAppsAppIdSessionsSessionIdRenegotiateResponse(rsp *http.Response) (*PutAppsAppIdSessionsSessionIdRenegotiateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAppsAppIdSessionsSessionIdRenegotiateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionDescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAppsAppIdSessionsSessionIdTracksCloseResponse parses an HTTP response from a PutAppsAppIdSessionsSessionIdTracksCloseWithResponse call
func ParsePutAppsAppIdSessionsSessionIdTracksCloseResponse(rsp *http.Response) (*PutAppsAppIdSessionsSessionIdTracksCloseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAppsAppIdSessionsSessionIdTracksCloseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloseTracksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAppsAppIdSessionsSessionIdTracksNewResponse parses an HTTP response from a PostAppsAppIdSessionsSessionIdTracksNewWithResponse call
func ParsePostAppsAppIdSessionsSessionIdTracksNewResponse(rsp *http.Response) (*PostAppsAppIdSessionsSessionIdTracksNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsAppIdSessionsSessionIdTracksNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
